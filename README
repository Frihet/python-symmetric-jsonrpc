Python Symmetric JSON-RPC

"A more beautiful JSON-RPC implemenation in python."

A JSON-RPC (see http://json-rpc.org) implementation for Python, with
the following features:

 * Symmetric - both the connecting and the listening process can send
   and receive method calls, there is no specific "server" or "client"
   process, and no difference between the two connection ends apart
   from who initiates the connection.

 * Asynchronous - calls can be interlieved with new calls initiated
   before a previous call has returned.

 * Thread-safe - calls to the remote side can be done from multiple
   threads without any locking.

 * Transport agnostic - can run on top of anything that resembles a
   socket the slightest (e.g. OpenSSL)

What this really drills down to is that this library implements the
full specification of JSON-RPC over sockets, something no other
implementation of JSON-RPC for Python does.


Example usage that illustrates the symmetricity of the library:


#### Server.py ####
import symmetricjsonrpc

class PongRPCServer(symmetricjsonrpc.RPCServer):
    class Dispatch(symmetricjsonrpc.RPCServer.Dispatch):
        class Dispatch(symmetricjsonrpc.RPCServer.Dispatch.Dispatch):
            class Dispatch(symmetricjsonrpc.RPCServer.Dispatch.Dispatch.Dispatch):
                def dispatch_request(self, subject):
                    assert subject['method'] == "ping"
                    # Call the client back
                    # self.parent is a symmetricjsonrpc.RPCClient subclass (see the client code below)
                    assert self.parent.request("pingping", wait_for_response=True) == "pingpong"
                    return "pong"

# Set up a TCP socket and start listening on it for connections
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(('', 4712))
s.listen(1)
# Create a server thread handling incoming connections
server = PongRPCServer(s, name="PongServer")
# Wait for the server to stop serving clients - generally never
server.join()


#### Client.py ####
import symmetricjsonrpc

class PingRPCClient(symmetricjsonrpc.RPCClient):
    class Dispatch(symmetricjsonrpc.RPCClient.Dispatch):
        def dispatch_request(self, subject):
            # Handle callbacks from the server
            assert subject['method'] == "pingping"
            return "pingpong"    

# Set up a TCP socket and connect to the server
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('localhost', 4712))
# Create a client thread handling for incoming requests
client = PingRPCClient(s.makefile('r+'))
# Call a method on the server
self.assertEqual(client.request("ping", wait_for_response=True), "pong")
